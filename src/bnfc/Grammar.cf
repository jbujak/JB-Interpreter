-- programs ------------------------------------------------

entrypoints Program ;

Program.    Program ::= [TopDef] ;

TypeFnDef.  TopDef ::= Type Ident "(" [Arg] ")" Block ;

VoidFnDef.  TopDef ::= "void" Ident "(" [Arg] ")" Block ;

separator nonempty TopDef "" ;

Arg. 	    Arg ::= Type Ident;

separator   Arg "," ;

-- statements ----------------------------------------------

Block.      Block ::= "{" [Stmt] "}" ;

separator   Stmt "" ;

BStmt.       Stmt ::= Block ;

FStmt.       Stmt ::= TopDef ;

Cond.       Stmt ::= "if" "(" Val ")" Stmt  ;

CondElse.   Stmt ::= "if" "(" Val ")" Stmt "else" Stmt  ;

While.      Stmt ::= "while" "(" Val ")" Stmt ;

WhileAs.    Stmt ::= "while" "(" Val ")" "as" Ident Stmt ;

Break.      Stmt ::= "break;" ;

BreakL.     Stmt ::= "break" Ident ";" ;

Continue.   Stmt ::= "continue;" ;

ContinueL.  Stmt ::= "continue" Ident ";" ;

Ret.        Stmt ::= "return" Val ";" ;

VRet.       Stmt ::= "return" ";" ;

Decl.       Stmt ::= Type Item ";" ;

NoInit.     Item ::= Ident ; 

Init.       Item ::= Ident "=" Val ;

BinMod.     Stmt ::= LVal BinModOp Val  ";" ;

UnMod.      Stmt ::= LVal UnModOp ";" ;

ValStmt.     Stmt ::= Val ";" ;

-- Types ---------------------------------------------------

Int.        Type ::= "int" ;

Bool.       Type ::= "bool" ;

Str.        Type ::= "string" ;

UserType.   Type ::= Ident ;

Array.      Type ::= "[" Type "]" ;

-- Values --------------------------------------------------
ELval.      Val6 ::= LVal ;

EVar.       Val6 ::= Var ;

ELitInt.    Val6 ::= Integer ;

ELitTrue.   Val6 ::= "true" ;

ELitFalse.  Val6 ::= "false" ;

EString.    Val6 ::= String ;

EApp.       Val6 ::= Ident "(" [Arg] ")" ;

EArr.       Val6 ::= "[" [Val] "]" ;

ERec.       Val6 ::= "<" [RecEntry] ">" ;

Neg.        Val5 ::= "-" Val6 ;

Not.        Val5 ::= "!" Val6 ;

EMul.       Val4 ::= Val4 MulOp Val5 ;

EAdd.       Val3 ::= Val3 AddOp Val4 ;

ERel.       Val2 ::= Val2 RelOp Val3 ;

EAnd.       Val1 ::= Val2 "&&" Val1 ;

EOr.        Val ::= Val1 "||" Val ;

ECase.      Val ::= "case" Val "of" [CaseEntry] ;

Var.        Var ::= ":" Ident "(" Val ")" ;

ArgVal.     Arg ::= Val ;

ArgRef.     Arg ::= "&" Val ;

RecEntry.   RecEntry ::= "." Ident "=" Val ;

CaseEntry.  CaseEntry ::= "|" Var "->" Val ;

coercions   Val 6 ;

separator   Val "," ;

terminator  RecEntry ";" ;

separator   CaseEntry "," ;

-- Left values ---------------------------------------------

LVar.       LVal ::= Ident ;

LArr.       LVal ::= LVal "[" Val "]" ;

LRec.       LVal ::= LVal "->" Ident ;

-- operators -----------------------------------------------

Plus.       AddOp ::= "+" ;

Minus.      AddOp ::= "-" ;

Times.      MulOp ::= "*" ;

Div.        MulOp ::= "/" ;

Mod.        MulOp ::= "%" ;

LTH.        RelOp ::= "<" ;

LE.         RelOp ::= "<=" ;

GTH.        RelOp ::= ">" ;

GE.         RelOp ::= ">=" ;

EQU.        RelOp ::= "==" ;

NE.         RelOp ::= "!=" ;

AssOp.      BinModOp ::= "=" ;

PlusEq.     BinModOp ::= "+=" ;

MinusEq.    BinModOp ::= "-=" ;

TimesEq.    BinModOp ::= "*=" ;

DivEq.      BinModOp ::= "/=" ;

Inc.        UnModOp ::= "++" ;

Dec.        UnModOp ::= "--" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

